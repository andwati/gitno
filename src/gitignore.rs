use color_eyre::Result;
use itertools::Itertools;
use std::collections::HashSet;

pub struct GitignoreProcessor;

impl GitignoreProcessor {
    pub fn combine_gitignores(gitignores: &[String]) -> Result<String> {
        // Collect and deduplicate lines
        let unique_lines: HashSet<String> = gitignores
            .iter()
            .flat_map(|content| content.lines())
            .filter(|line| !line.trim().is_empty()) // Remove empty lines
            .filter(|line| !line.starts_with('#')) // Remove comment lines
            .map(|line| line.trim().to_string())
            .collect();

        // Organize lines: comments first, then gitignore patterns
        let mut comments: Vec<String> = vec![
            "# Generated by gitno",
            "# Combines multiple gitignore templates",
            "",
        ]
        .iter()
        .map(|s| s.to_string())
        .collect();

        let mut patterns: Vec<String> = unique_lines.into_iter().sorted().collect();

        comments.append(&mut patterns);

        Ok(comments.join("\n"))
    }

    pub fn write_gitignore(content: &str, path: &std::path::Path) -> Result<()> {
        std::fs::write(path, content)?;
        Ok(())
    }
}
